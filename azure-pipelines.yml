resources:
   containers:
   - container: fpkde
     options: '--privileged'
     image: mobsya/flatpak-builders:kde-latest

trigger:
  tags:
    include:
    - 2.*
  branches:
    include:
    - '*'

variables:
- group: passwords
- name: blockly_version
  value: "v20200506.1"
- name: scratch_version
  value: "v20200505.1"
- name: blockly_url
  value: "https://github.com/Mobsya/thymio-blockly-standalone/releases/download/$(blockly_version)/thymio-blockly.tar.gz"
- name: scratch_url
  value: "https://github.com/Mobsya/scratch-gui/releases/download/$(scratch_version)/scratch-gui.tar.gz"
- name: vpl3_url
  value: "https://github.com/Mobsya/ci-data/releases/download/data/vpl3-thymio-suite.tar.gz"
- name: vcpkg_commit
  value: "c4f0372c638831d8d524feb1039611852eca6512"
- name: visual_bootstrapper
  value: "https://github.com/Mobsya/ci-data/releases/download/data/vs_enterprise.exe"

jobs:

- job: 'MSVC'
  timeoutInMinutes: 90
  pool:
      vmImage: windows-2019
  strategy:
    matrix:
      x64:
        ARCH: 'x64'
        vcpkgTriplet: 'x64-windows-static'
        QT_URL: "https://github.com/Mobsya/ci-data/releases/download/data/qt-5.12-msvc-x64.7z"
        CMAKE_PREFIX_PATH: $(Build.BinariesDirectory)/Qt/5.12.3/msvc2017_64/
        cmake_generator: "Visual Studio 16 2019"
        ARCH_CMAKE: "-A x64 -T version=14.25"
        VCINSTALLDIR: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC"
      x86:
        ARCH: 'x86'
        vcpkgTriplet: 'x86-windows-static'
        QT_URL: "https://github.com/Mobsya/ci-data/releases/download/data/qt-5.12-msvc-x86.7z"
        CMAKE_PREFIX_PATH: $(Build.BinariesDirectory)/Qt/5.12.3/msvc2017
        cmake_generator: "Visual Studio 16 2019"
        ARCH_CMAKE: "-A Win32 -T version=14.25"
        VCINSTALLDIR: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC"
  steps:
  - script: |
       git submodule update --init --recursive
    displayName: Update submodules
  - script: |
        makensis  -VERSION
    displayName: Install NSIS
  - task: Cache@2
    displayName: Cache vcpkg
    inputs:
      key: $(Build.SourcesDirectory)/vcpkg-list.txt| "$(vcpkg_commit)" | "windows-2019" | "6" | $(vcpkgTriplet)
      path: '$(Build.BinariesDirectory)/vcpkg'
  - task: Cache@2
    displayName: 'Qt Cache'
    inputs:
      key:  Qt_5_12_3 | "$(QT_URL)" | "2"
      path: $(Build.BinariesDirectory)/Qt/
      cacheHitVar: QT_LIB_CACHE_RESTORED
  - task: lucappa.cmake-ninja-vcpkg-tasks.d855c326-b1c0-4d6f-b1c7-440ade6835fb.run-vcpkg@0
    displayName: 'Run vcpkg'
    inputs:
      vcpkgTriplet: '$(vcpkgTriplet)'
      vcpkgArguments: '@$(Build.SourcesDirectory)/vcpkg-list.txt'
      vcpkgGitCommitId: "$(vcpkg_commit)"
      vcpkgGitURL: https://github.com/mobsya/vcpkg.git
  - powershell: |
        Get-ChildItem $(Build.BinariesDirectory)/vcpkg -recurse -include *.o | remove-item
        Remove-Item -Recurse -Force $(Build.BinariesDirectory)/vcpkg/buildtrees -ErrorAction Ignore
        Remove-Item -Recurse -Force $(Build.BinariesDirectory)/vcpkg/downloads -ErrorAction Ignore
    displayName: 'Remove vcpkg object files'
  - powershell: |
        $output = [System.IO.Path]::GetTempFileName()
        Invoke-WebRequest -Verbose  -UseBasicParsing -Uri "$(QT_URL)" -OutFile $output
        7z -bb -y x  $output -o$(Build.BinariesDirectory)
    condition: ne(variables.QT_LIB_CACHE_RESTORED, 'true')
    displayName: Fetch Qt
  - task: PythonScript@0
    displayName: Fetch scratch, blockly and vpl3
    inputs:
      scriptSource: 'inline'
      script: |
        from urllib.request import urlretrieve
        import tarfile
        def extract(url, file):
            print("{} -> {}".format(url, file))
            urlretrieve(url, file)
            tar = tarfile.open(file, "r:gz")
            tar.extractall()
            tar.close()
        extract('$(blockly_url)', 'thymio-blockly.tar.gz')
        extract('$(scratch_url)', 'scratch-gui.tar.gz')
        extract('$(vpl3_url)', 'vpl3-thymio-suite.tar.gz')
  - task: DownloadSecureFile@1
    name: wincert
    inputs:
      secureFile: "mobsya-windows.pfx"
  - script: |
        if exist "C:\Program Files\CMake\bin" set PATH=C:\Program Files\CMake\bin;%PATH%
        set "PATH=%PATH%;C:\Program Files (x86)\Windows Kits\10\App Certification Kit\\"

        cpack.exe --version
        cmake.exe --version

        cmake -G "$(cmake_generator)" $(ARCH_CMAKE) -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$(Build.BinariesDirectory)/vcpkg/scripts/buildsystems/vcpkg.cmake "-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/windows/cl-toolchain.cmake" "-DVCPKG_TARGET_TRIPLET=$(vcpkgTriplet)" -DFLATBUFFERS_BUILD_TESTS=OFF -DCREATE_QT_CONF_FILE=ON $(Build.SourcesDirectory)
        cmake --build . --config Release --parallel
        cpack.exe -G NSIS --verbose --debug

    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Run CMake and CPack'
    env:
      SIGNTOOL_PFX: $(wincert.secureFilePath)
      SIGNTOOL_PASSPHRASE: $(mobsya-win-p12)

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.BinariesDirectory)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      contents: 'ThymioSuite-*.exe'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'ThymioSuite.exe'

